	loader: {
		registerAll: function() {
			links = document.querySelectorAll("a[href].internal-link");
			for (var i = links.length - 1; i >= 0; i--) {
				loader.register(links[i]);
			}
		},
		local: function() {
			return typeof localStorage == "object";
		},
		localExist: function() {
			if (!localStorage.getItem("vloader") == "test") {
				localStorage.setItem("vloader", "test")
			}
		},
		parseURL: function(url) {
			a = document.createElement("a");
			a.href = url;
			return a.href;
		},
		setLocal: function(url, data, method) {
			if (!typeof data == "object") {
				new Error("V loader only store request objects");
			}
			url = loader.parseURL(url);
			d = { response: data.response, url: url, status: data.status, method: method, statusText: data.status, time: Date.now };
			localStorage["vload_" + url] = JSON.stringify(d);
		},
		getLocal: function(url) {
			url = loader.parseURL(url);
			loader.localExist();
			if (localStorage["vload_" + url]) {
				return JSON.parse(localStorage["vload_" + url]);
			} else {
				return false;
			}
		},
		parse: function(html) {
			ht = document.createElement("html");
			ht.innerHTML = html;
			loads = ht.querySelectorAll("link[rel=\"stylesheet\"],script[src]");
			scripts = [];
			links = [];
			for (var i = 0; i < loads.length; i++) {
				if (loads[i].tagName.toLowerCase() == "script") {
					content = loader.load(loads[i].getAttribute("src"));
					s = document.createElement("script");
					s.innerHTML = content.response;
					ht.appendChild(s);
					loads[i].remove();
				}
				if (loads[i].tagName.toLowerCase() == "link") {
					content = loader.load(loads[i].getAttribute("href"));
					s = "<style>" + content.response + "</style>";
					links.push(loads[i]);
					loads[i].outerHTML = s;
				}
			}
			document.documentElement.innerHTML = ht.innerHTML;
			lp = document.getElementById("load");
			if (lp) {
				window.scroll(0, 0);
				lp.innerHTML = "";
			}
			scripts = [];
		},
		exec_scripts: function() {
			scripts = [];
			scrtags = document.getElementsByTagName("script"); 
			for (var i = scrtags.length - 1; i >= 0; i--) {
				eval(scrtags[i].innerHTML);
			}
			var e = new Event('load', {
				bubbles: true,
				cancelable: true
			});
			document.dispatchEvent(e);
			window.dispatchEvent(e);
		},
		load: function(url, method = "GET") {
			function xmlfetch(url, method) {
				try {
					x = new XMLHttpRequest;
					x.open(method.toUpperCase(), url, false);
					x.send();
				} catch {
					new Error("AJAX Not Supported")
				}
				return x;
			}
			if (loader.local()) {
				if (loader.getLocal(url)) {
					v = loader.getLocal(url)
					return v;
				} else {
					res = xmlfetch(url, method);
					loader.setLocal(url, res, method);
					return loader.getLocal(url);
				}
			}
		},
		fetchEvent: function(url, method = "GET", popping = false) {
			lp = document.getElementById("load");
			if (lp) {
				window.scroll(0, 0);
				lp.innerHTML = "LOADING";
			}
			r = loader.load(url, method || "GET");
			loader.parse(r.response);
			if (r.status == 404) {
				lp = document.getElementById("load");
				if (lp) {
					window.scroll(0, 0);
					lp.innerHTML = "ERROR";
				}
				window.location = r.url;
			}
			if (typeof history.pushState != "undefined") { }
			if (!popping) {
				history.pushState({ url: r.url, method: r.method }, "vixalien", url);
			}
			onpopstate = function(e) {
				loader.fetchEvent(e.state.url, e.state.method, true);
			}
			loader.exec_scripts();
		},
		register: function(link) {
			if (typeof link == "undefined") {
				return 0;
			}
			link.addEventListener("click", function(e) {
				e.preventDefault();
				t = e.target;
				loader.fetchEvent(t.getAttribute("href"));
			})
		}
	}